name: Create Release and Build Android

on:
  push:
    branches:
      - main
permissions:
  contents: write

jobs:
  deploy_prod:
    name: Deploy To Production
    runs-on: ubuntu-latest
    outputs:
      releaseChannel: ${{ steps.releaseChannel.outputs.releaseChannel }}
      latestBinaryVersion: ${{ steps.latestBinaryVersion.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: Fetch Tags
        run: |
          git fetch --prune --unshallow --tags -f
      - uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - uses: rlespinasse/github-slug-action@v2.x
      - name: Generate Release Channel # Release Channels are named prod-<Major Release>, i.e. prod-1, prod-3
        id: releaseChannel
        run: |
          RELEASE_CHANNEL=$(echo ${{ env.GITHUB_REF_SLUG }} | sed -r 's/\.[0-9]+\.[0-9]+$//')
          echo "::set-output name=releaseChannel::$RELEASE_CHANNEL"
      - name: Install Packages
        run: npm install
      - name: Get Latest Binary Version # Binary Version will be x.x.x based on the latest tag
        id: latestBinaryVersion
        run: |
          # Release tag finds the lastest tag in the tree branch - i.e. prod-x.x.x
          RELEASE_TAG=$(echo $(git describe --tags --abbrev=0))
          # Using param substitution, we output x.x.x instead
          echo "::set-output name=version::${RELEASE_TAG#*-}"
      - name: Echo Version Details
        run: |
          echo Build number is $GITHUB_RUN_NUMBER
          echo Latest release is ${{ steps.latestBinaryVersion.outputs.version }}
          
  create_release_and_build_android:
    runs-on: ubuntu-latest
    needs: deploy_prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
            git config --local user.email "${{ secrets.GIT_USER_EMAIL }}"
            git config --local user.name "${{ secrets.GIT_USER_NAME }}"

      - name: Create tag
        id: create_tag
        run: |
          TAG=$(date +'%Y%m%d')-$(git rev-parse --short HEAD)
          git tag $TAG
          echo "::set-output name=tag::$TAG"

      - name: Push tag
        if: success()
        run: |
          git push origin ${{ steps.create_tag.outputs.tag }}

      - name: Generate Changelog
        id: changelog
        uses: metcalfc/changelog-generator@v0.4.0
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
          base-ref: 'prod-0'

      - name: Creating Release
        uses: ncipollo/release-action@v1
        with:
          body: |
            Changes in this Release: 
            ${{ steps.changelog.outputs.changelog }}
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release ${{ steps.create_tag.outputs.tag }}
          tag: ${{ steps.create_tag.outputs.tag }}
          allowUpdates: true

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Install dependencies
        run: npm install

      - name: Build Android Release
        env:
          APP_BUILD_VERSION: ${{ github.run_number }}
          APP_BINARY_VERSION: ${{ needs.deploy_prod.outputs.latestBinaryVersion }}
        run: |
          eas build --non-interactive -p android --profile preview > buildLogAndroid.txt
          cat buildLogAndroid.txt

      - name: Parse Asset URL
        id: androidUrl
        run: |
          ASSET_URL=$(cat buildLogAndroid.txt | tail | egrep -o 'https?://expo\.io/artifacts/[^ ]+')
          echo The android url is $ASSET_URL
          echo "::set-output name=assetUrl::$ASSET_URL"

      - name: Download APK Asset
        run: wget -O example-${{ steps.create_tag.outputs.tag }}.apk ${{ steps.androidUrl.outputs.assetUrl }}

      - name: Upload Release Asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./safebox-${{ steps.create_tag.outputs.tag }}.apk
          asset_name: safebox-${{ steps.create_tag.outputs.tag }}.apk
          tag: ${{ steps.create_tag.outputs.tag }}
